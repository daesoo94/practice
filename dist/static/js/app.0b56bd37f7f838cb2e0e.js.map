{"version":3,"sources":["webpack:///./src/js/player.js","webpack:///./src/js/prop.js","webpack:///./src/lib/astar.js","webpack:///./src/js/pathfinder.js","webpack:///./src/js/map.js","webpack:///./src/main.js","webpack:///./src/js/transition.js","webpack:///./src/js/entityfactory.js","webpack:///./src/js/chest.js","webpack:///./src/js/game.js","webpack:///./src/js/app.js","webpack:///./src/js/updater.js","webpack:///./src/js/entity.js","webpack:///./src/lib/voxel.js","webpack:///./src/share/gametypes.js","webpack:///./src/js/character.js"],"names":["Player","id","name","kind","__WEBPACK_IMPORTED_MODULE_1_babel_runtime_helpers_classCallCheck___default","this","_this","__WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_possibleConstructorReturn___default","__proto__","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_get_prototype_of___default","call","Character","Prop","__WEBPACK_IMPORTED_MODULE_3_babel_runtime_helpers_possibleConstructorReturn___default","load","geometry","THREE","BoxBufferGeometry","material","MeshLambertMaterial","color","mesh","Mesh","computeBoundingBox","offset","x","y","boundingBox","min","z","isLoaded","intensity","radius","light","PointLight","position","set","castShadow","add","Entity","diagonalSuccessors","$N","$S","$E","$W","N","S","E","W","grid","rows","cols","result","i","diagonalSuccessorsFree","nothingToDo","successors","find","diagonal","start","end","f1","f2","euclidean","manhattan","AStar","f","adj","distance","j","max","current","next","length","limit","Math","abs","list","open","g","v","sqrt","splice","p","reverse","Pathfinder","width","height","classCallCheck_default","ignored","initBlankGrid","blankGrid","entity","findIncomplete","gridX","gridY","path","findIncompletePath_","perfect","incomplete","push","applyIgnoreList_","isInt","n","Map","game","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_classCallCheck___default","loadMap","$","get","data","_initMap","_generateCollisionGrid","map","tilesize","collisions","props","_this2","_","tileIndex","pos","tileIndexToGridPosition","isOutOfBounds","tileNum","floor","Object","defineProperty","__webpack_exports__","value","app","canvas","__WEBPACK_IMPORTED_MODULE_0__js_app__","__webpack_require__","__WEBPACK_IMPORTED_MODULE_1__js_game__","App","Game","document","getElementById","init","setGame","click","event","gamePos","mouse","pageX","left","pageY","top","Transition","startValue","endValue","duration","inProgress","currentTime","updateFunction","stopFunction","startTime","count","log","debug","elapsed","diff","round","stop","step","EntityFactory","isFunction","builders","Error","Types","Entities","CHEST","Chest","FIRE","prop","attachPointLight","scene","Scene","camera","PerspectiveCamera","renderer","WebGLRenderer","shadowMap","enabled","setPixelRatio","window","devicePixelRatio","setSize","PlaneBufferGeometry","plane","rotation","order","PI","receiveShadow","_terrain","lookAt","Vector3","OrbitControls","domElement","entities","entityGrid","Date","getTime","updater","update","render","isStopped","requestAnimationFrame","tick","bind","username","loadSprites","Updater","wait","setInterval","isSpritesLoaded","clearInterval","children","remove","initEntityGrid","hemiLight","HemisphereLight","setHSL","groundColor","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator___default","done","propData","propEntity","createEntity","setGridSize","setGridPosition","addEntity","err","return","pathfinder","player","setSprite","sprites","onRequestPath","findPath","onStopPathing","target","removeEntity","_loop","spName","img","Image","src","onload","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","any","sprite","registerEntityPosition","unregisterEntityPosition","size","keys","intersect","boundingbox","ts","Vector2","getSize","raycaster","Raycaster","setFromCamera","intersects","intersectObjects","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","inter","getGridPosition","point","getEntityAt","setTarget","follow","go","callback","each","character","isColliding","scrollTo","center","run","updateCharacters","updateTransitions","forEachEntity","updateCharacter","c","moveSpeed","isMoving","movement","orientation","Orientations","LEFT","hasMoved","nextStep","RIGHT","UP","DOWN","offsetX","offsetZ","m","gridSize","setPosition","mask","Int32Array","build","lo","hi","fn","dims","Array","k","volume","vertices","faces","dimsX","dimsXY","d","l","w","h","qdimsX","qdimsXY","xd","u","q","du","dv","dimsD","dimsU","dimsV","a","b","vertex_count","mesher","PLAYER","nextGridX","nextGridY","newDestination","adjacentTiles","walkSpeed","idleSpeed","buildMesh","createElement","context","getContext","translate","scale","drawImage","getImageData","getFramePixelData","voxel","r","Geometry","Color","Face3","vertexColors","computeFaceNormals","verticesNeedUpdate","elementsNeedUpdate","normalsNeedUpdate","doubleSided","request_path_callback","start_pathing_callback","stop_pathing_callback","before_step_callback","step_callback","hasmoved_callback","setOrientation","followingMode","moveTo","destination","continueTo","requestPathfindingTo","followPath","interrupted","walk","pop","updatePositionOnGrid","hasNextStep","hasChangedItsPath","updateMovement","idle"],"mappings":"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","file":"static/js/app.0b56bd37f7f838cb2e0e.js","sourcesContent":["import Character from './character';\n\nexport default class Player extends Character{\n\n    constructor(id, name, kind) {\n        super(id, kind);\n\n        this.name = name;\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/js/player.js","import Entity from './entity';\r\n\r\nexport default class Prop extends Entity {\r\n    constructor(id, kind) {\r\n        super(id, kind);\r\n        \r\n        this.load();\r\n    }\r\n\r\n    load() {\r\n        // 공통적으로 box 메쉬를 만들어서 사용한다. 일단은 메쉬가 따로 없으므로 ...\r\n        // TODO :load() 데이터를 외부의 데이터를 읽도록 해야한다\r\n        const geometry = new THREE.BoxBufferGeometry( 8, 8, 8 );\r\n        const material\t= new THREE.MeshLambertMaterial({ color: 0xffffff });\r\n        const mesh\t= new THREE.Mesh( geometry, material );\r\n\r\n        geometry.computeBoundingBox();\r\n\r\n        this.mesh = mesh;\r\n        this.offset = {\r\n            x: 0,\r\n            y: -geometry.boundingBox.min.y,\r\n            z: 0,\r\n        }\r\n\r\n        this.isLoaded = true;\r\n    }\r\n\r\n    attachPointLight(color, intensity, radius) {\r\n        var light = new THREE.PointLight(color, intensity, radius);\r\n        light.position.set(0, 10, 0);\r\n        light.castShadow = true;\r\n        this.mesh.add( light );\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/js/prop.js","/**\r\n * A* (A-Star) algorithm for a path finder\r\n * @author  Andrea Giammarchi\r\n * @license Mit Style License\r\n */\r\n\r\nfunction diagonalSuccessors($N, $S, $E, $W, N, S, E, W, grid, rows, cols, result, i) {\r\n    if($N) {\r\n        $E && !grid[N][E] && (result[i++] = {x:E, y:N});\r\n        $W && !grid[N][W] && (result[i++] = {x:W, y:N});\r\n    }\r\n    if($S){\r\n        $E && !grid[S][E] && (result[i++] = {x:E, y:S});\r\n        $W && !grid[S][W] && (result[i++] = {x:W, y:S});\r\n    }\r\n    return result;\r\n}\r\n\r\nfunction diagonalSuccessorsFree($N, $S, $E, $W, N, S, E, W, grid, rows, cols, result, i) {\r\n    $N = N > -1;\r\n    $S = S < rows;\r\n    $E = E < cols;\r\n    $W = W > -1;\r\n    if($E) {\r\n        $N && !grid[N][E] && (result[i++] = {x:E, y:N});\r\n        $S && !grid[S][E] && (result[i++] = {x:E, y:S});\r\n    }\r\n    if($W) {\r\n        $N && !grid[N][W] && (result[i++] = {x:W, y:N});\r\n        $S && !grid[S][W] && (result[i++] = {x:W, y:S});\r\n    }\r\n    return result;\r\n}\r\n\r\nfunction nothingToDo($N, $S, $E, $W, N, S, E, W, grid, rows, cols, result, i) {\r\n    return result;\r\n}\r\n\r\nfunction successors(find, x, y, grid, rows, cols){\r\n    var\r\n        N = y - 1,\r\n        S = y + 1,\r\n        E = x + 1,\r\n        W = x - 1,\r\n        $N = N > -1 && !grid[N][x],\r\n        $S = S < rows && !grid[S][x],\r\n        $E = E < cols && !grid[y][E],\r\n        $W = W > -1 && !grid[y][W],\r\n        result = [],\r\n        i = 0\r\n    ;\r\n    $N && (result[i++] = {x:x, y:N});\r\n    $E && (result[i++] = {x:E, y:y});\r\n    $S && (result[i++] = {x:x, y:S});\r\n    $W && (result[i++] = {x:W, y:y});\r\n    return find($N, $S, $E, $W, N, S, E, W, grid, rows, cols, result, i);\r\n}\r\n\r\nfunction diagonal(start, end, f1, f2) {\r\n    return f2(f1(start.x - end.x), f1(start.y - end.y));\r\n}\r\n\r\nfunction euclidean(start, end, f1, f2) {\r\n    var\r\n        x = start.x - end.x,\r\n        y = start.y - end.y\r\n    ;\r\n    return f2(x * x + y * y);\r\n}\r\n\r\nfunction manhattan(start, end, f1, f2) {\r\n    return f1(start.x - end.x) + f1(start.y - end.y);\r\n}\r\n\r\nfunction AStar(grid, start, end, f) {\r\n    var\r\n        cols = grid[0].length,\r\n        rows = grid.length,\r\n        limit = cols * rows,\r\n        f1 = Math.abs,\r\n        f2 = Math.max,\r\n        list = {},\r\n        result = [],\r\n        open = [{x:start[0], y:start[1], f:0, g:0, v:start[0]+start[1]*cols}],\r\n        length = 1,\r\n        adj, distance, find, i, j, max, min, current, next\r\n    ;\r\n    end = {x:end[0], y:end[1], v:end[0]+end[1]*cols};\r\n    switch (f) {\r\n        case \"Diagonal\":\r\n            find = diagonalSuccessors;\r\n        case \"DiagonalFree\":\r\n            distance = diagonal;\r\n            break;\r\n        case \"Euclidean\":\r\n            find = diagonalSuccessors;\r\n        case \"EuclideanFree\":\r\n            f2 = Math.sqrt;\r\n            distance = euclidean;\r\n            break;\r\n        default:\r\n            distance = manhattan;\r\n            find = nothingToDo;\r\n            break;\r\n    }\r\n    find || (find = diagonalSuccessorsFree);\r\n    do {\r\n        max = limit;\r\n        min = 0;\r\n        for(i = 0; i < length; ++i) {\r\n            if((f = open[i].f) < max) {\r\n                max = f;\r\n                min = i;\r\n            }\r\n        };\r\n        current = open.splice(min, 1)[0];\r\n        if (current.v != end.v) {\r\n            --length;\r\n            next = successors(find, current.x, current.y, grid, rows, cols);\r\n            for(i = 0, j = next.length; i < j; ++i){\r\n                (adj = next[i]).p = current;\r\n                adj.f = adj.g = 0;\r\n                adj.v = adj.x + adj.y * cols;\r\n                if(!(adj.v in list)){\r\n                    adj.f = (adj.g = current.g + distance(adj, current, f1, f2)) + distance(adj, end, f1, f2);\r\n                    open[length++] = adj;\r\n                    list[adj.v] = 1;\r\n                }\r\n            }\r\n        } else {\r\n            i = length = 0;\r\n            do {\r\n                result[i++] = [current.x, current.y];\r\n            } while (current = current.p);\r\n            result.reverse();\r\n        }\r\n    } while (length);\r\n    return result;\r\n}\r\n\r\nexport default AStar;\n\n\n// WEBPACK FOOTER //\n// ./src/lib/astar.js","import AStar from '../lib/astar';\r\n\r\nexport default class Pathfinder {\r\n    constructor(width, height) {\r\n        this.width = width;\r\n        this.height = height;\r\n        this.grid = null;\r\n        this.ignored = [];\r\n\r\n        this.initBlankGrid();\r\n    }\r\n\r\n    initBlankGrid() {\r\n        this.blankGrid = [];\r\n        for(let i=0; i < this.height; i += 1) {\r\n            this.blankGrid[i] = [];\r\n            for(let j=0; j < this.width; j += 1) {\r\n                this.blankGrid[i][j] = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    findPath(grid, entity, x, y, findIncomplete) {\r\n        const start = [entity.gridX, entity.gridY];\r\n        const end = [x, y];\r\n\r\n        this.grid = grid;\r\n        let path = AStar(this.grid, start, end);\r\n    \r\n        if(path.length === 0 && findIncomplete === true) {\r\n            // If no path was found, try and find an incomplete one\r\n            // to at least get closer to destination.\r\n            path = this.findIncompletePath_(start, end);\r\n        }\r\n    \r\n        return path;\r\n    }\r\n\r\n    /**\r\n     * Finds a path which leads the closest possible to an unreachable x, y position.\r\n     *\r\n     * Whenever A* returns an empty path, it means that the destination tile is unreachable.\r\n     * We would like the entities to move the closest possible to it though, instead of\r\n     * staying where they are without moving at all. That's why we have this function which\r\n     * returns an incomplete path to the chosen destination.\r\n     *\r\n     * @private\r\n     * @returns {Array} The incomplete path towards the end position\r\n     */\r\n    findIncompletePath_(start, end) {\r\n        let perfect, x, y,\r\n            incomplete = [];\r\n\r\n        perfect = AStar(this.blankGrid, start, end);\r\n    \r\n        for(let i=perfect.length-1; i > 0; i -= 1) {\r\n            x = perfect[i][0];\r\n            y = perfect[i][1];\r\n        \r\n            if(this.grid[y][x] === 0) {\r\n                incomplete = AStar(this.grid, start, [x, y]);\r\n                break;\r\n            }\r\n        }\r\n        return incomplete;\r\n    }\r\n\r\n    /**\r\n     * Removes colliding tiles corresponding to the given entity's position in the pathing grid.\r\n     */\r\n    ignoreEntity(entity) {\r\n        if(entity) {\r\n            this.ignored.push(entity);\r\n        }\r\n    }\r\n\r\n    clearIgnoreList() {\r\n        this.applyIgnoreList_(false);\r\n        this.ignored = [];\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/js/pathfinder.js","import $ from \"jquery\";\r\nimport * as _ from 'underscore';\r\n\r\nconst isInt = function(n) {\r\n    return (n % 1) === 0;\r\n};\r\n\r\nexport default class Map {\r\n    constructor(game) {\r\n        this.loadMap();\r\n    }\r\n\r\n    loadMap() {\r\n        const filepath = \"static/maps.json\";\r\n        $.get(filepath, (data) => {\r\n            this._initMap(data);\r\n            this._generateCollisionGrid();\r\n            this.isLoaded = true;\r\n        }, 'json');\r\n    }\r\n\r\n    _initMap(map) {\r\n        this.width = map.width;\r\n        this.height = map.height;\r\n        this.data = map.data;\r\n        this.tilesize = map.tilesize;\r\n        this.collisions = map.collisions;\r\n        this.props = map.props;\r\n    }\r\n\r\n    _generateCollisionGrid() {\r\n        this.grid = [];\r\n        for(let\ti = 0; i < this.height; i++) {\r\n            this.grid[i] = [];\r\n            for(let j = 0; j < this.width; j++) {\r\n                this.grid[i][j] = 0;\r\n            }\r\n        }\r\n\r\n        _.each(this.collisions, (tileIndex) => {\r\n            const pos = this.tileIndexToGridPosition(tileIndex+1);\r\n            this.grid[pos.y][pos.x] = 1;\r\n        });\r\n    }\r\n\r\n    isColliding(x, y) { \r\n        if(this.isOutOfBounds(x, y) || !this.grid) {\r\n            return false;\r\n        }\r\n        return (this.grid[y][x] === 1);\r\n    }\r\n\r\n    isOutOfBounds(x, y) {\r\n        return isInt(x) && isInt(y) && (x < 0 || x >= this.width || y < 0 || y >= this.height);\r\n    }\r\n\r\n    tileIndexToGridPosition(tileNum) {\r\n        // 타일은 0 번은 없는 것이기 때문에 1번부터 시작한다\r\n        tileNum -= 1;\r\n        const x = tileNum % this.width;\r\n        const y = Math.floor(tileNum / this.width);\r\n\r\n        return { x: x, y: y };\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/js/map.js","import App from './js/app';\nimport Game from './js/game';\n\nfunction initApp() {\n  const app = new App();\n  const game = new Game();\n\n  var canvas = document.getElementById(\"canvas\");\n  canvas.width = 800;\n  canvas.height = 400;\n\n  game.init(canvas);\n  app.setGame(game);\n\n  // 게임을 시작한다\n  $('#canvas').click(function (event) {\n    // 마우스 상태정보를 업데이트한다\n    // TODO : 일괄 코드로 변경필요\n    var gamePos = $('#canvas').offset();\n\n    const mouse = {};\n    mouse.x = event.pageX - gamePos.left;\n    mouse.y = event.pageY - gamePos.top;\n          \n    game.click(mouse.x, mouse.y);\n  });\n\n\n  // 플레이 버튼을 누르면 시작하게 해야 하지만... 일단은 그냥하자\n  app.start(\"TEST\");\n}\n\ninitApp();\n\n\n// WEBPACK FOOTER //\n// ./src/main.js","\r\n export default class Transition {\r\n    constructor() {\r\n        this.startValue = 0;\r\n        this.endValue = 0;\r\n        this.duration = 0;\r\n        this.inProgress = false;\r\n    }\r\n\r\n    start(currentTime, updateFunction, stopFunction, startValue, endValue, duration) {\r\n        this.startTime = currentTime;\r\n        this.updateFunction = updateFunction;\r\n        this.stopFunction = stopFunction;\r\n        this.startValue = startValue;\r\n        this.endValue = endValue;\r\n        this.duration = duration;\r\n        this.inProgress = true;\r\n        this.count = 0;\r\n    }\r\n\r\n    step(currentTime) {\r\n        if(this.inProgress) {\r\n            if(this.count > 0) {\r\n                this.count -= 1;\r\n                log.debug(currentTime + \": jumped frame\");\r\n            }\r\n            else {\r\n                var elapsed = currentTime - this.startTime;\r\n        \r\n                if(elapsed > this.duration) {\r\n                    elapsed = this.duration;\r\n                }\r\n    \r\n                var diff = this.endValue - this.startValue;\r\n                var i = this.startValue + ((diff / this.duration) * elapsed);\r\n        \r\n                i = Math.round(i);\r\n        \r\n                if(elapsed === this.duration || i === this.endValue) {\r\n                    this.stop();\r\n                    if(this.stopFunction) {\r\n                        this.stopFunction();\r\n                    }\r\n                }\r\n                else if(this.updateFunction) {\r\n                    this.updateFunction(i);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    restart(currentTime, startValue, endValue) {\r\n        this.start(currentTime, this.updateFunction, this.stopFunction, startValue, endValue, this.duration);\r\n        this.step(currentTime);\r\n    }\r\n\r\n    stop() {\r\n        this.inProgress = false;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/transition.js","import Types from '../share/gametypes';\nimport Prop from './prop';\nimport Chest from './chest';\n\nclass EntityFactory {\n    static builders = [];\n    static createEntity(kind, id, name) {\n        if(!kind) {\n          \n            return;\n        }\n    \n        if(!_.isFunction(EntityFactory.builders[kind])) {\n            throw Error(kind + \" is not a valid Entity type\");\n        }\n    \n        return EntityFactory.builders[kind](id, name);\n    };\n}\n\nEntityFactory.builders[Types.Entities.CHEST] = function(id) {\n    return new Chest(id);\n};\n\nEntityFactory.builders[Types.Entities.FIRE] = function(id) {\n    const prop= new Prop(id, Types.Entities.FIRE);\n    prop.attachPointLight(0xffc0a0, 1, 128);\n    return prop;\n};\n\nexport default EntityFactory;\n\n\n// WEBPACK FOOTER //\n// ./src/js/entityfactory.js","import Types from '../share/gametypes';\r\nimport Prop from \"./prop\";\r\n\r\nexport default class Chest extends Prop {\r\n    constructor(id) { \r\n        super(id, Types.Entities.CHEST);\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/js/chest.js","import Player from './player';\r\nimport Updater from './updater';\r\nimport Map from './map';\r\nimport Pathfinder from './pathfinder';\r\nimport EntityFactory from './entityfactory';\r\n\r\nimport OrbitControls  from 'three-orbitcontrols';\r\nimport Chest from './chest';\r\n\r\n\r\n\r\nexport default class Game {\r\n    init(canvas) {\r\n        const scene = new THREE.Scene();\r\n\r\n        const camera = new THREE.PerspectiveCamera( 45, canvas.width / canvas.height, 1, 1000 );\r\n        camera.position.set( 0, 100, 250 );\r\n\r\n        const renderer = new THREE.WebGLRenderer({canvas: canvas});\r\n        renderer.shadowMap.enabled = true;\r\n        renderer.setPixelRatio( window.devicePixelRatio );\r\n        renderer.setSize( canvas.width, canvas.height );\r\n\r\n        this.renderer = renderer;\r\n        this.camera = camera;\r\n        this.scene = scene;\r\n\r\n        //===========================\r\n        // 테스트 코드이다.\r\n        const map = {\r\n            width : 10,\r\n            height: 10,\r\n            tileSize: 16,\r\n        }\r\n\r\n        const geometry = new THREE.PlaneBufferGeometry(map.width * map.tileSize, map.height * map.tileSize, map.width, map.height );\r\n        const material = new THREE.MeshLambertMaterial( { color: 0x405040 } );\r\n        const plane  = new THREE.Mesh( geometry, material );\r\n        plane.rotation.order = 'YXZ';\r\n        plane.rotation.x = -Math.PI/2;\r\n        plane.receiveShadow = true;\r\n        // 클릭 판정용 바운딩박스\r\n        geometry.computeBoundingBox();\r\n        // 월드용 오프셋을 기록한다\r\n        \r\n\r\n        //scene.add( plane );\r\n\r\n        this._terrain = plane;\r\n\r\n        // TODO : 카메라 시선을 플레이어에 맞추어야 한다\r\n        camera.lookAt(new THREE.Vector3(0, 0, 0));\r\n        new OrbitControls(camera, renderer.domElement)\r\n\r\n        // 게임 정보\r\n        this.entities = {};\r\n        this.entityGrid = null;\r\n    }\r\n\r\n    tick() {\r\n        this.currentTime = new Date().getTime();\r\n\r\n        // 로직 -> 렌더링 순서로 업데이트를 한다\r\n        this.updater.update();\r\n        this.renderer.render( this.scene, this.camera );\r\n        \r\n        if (!this.isStopped) {\r\n            requestAnimationFrame(this.tick.bind(this));\r\n        }\r\n    }\r\n\r\n    start() {\r\n        this.tick();\r\n    }\r\n\r\n    stop() {\r\n        this.isStopped = true;\r\n    }\r\n\r\n    run(username) {\r\n        // 리소스를 로딩하고 끝날때까지 기다린다.\r\n        this.loadSprites();\r\n        this.loadMap();\r\n        this.updater = new Updater(this);\r\n\r\n        const wait = setInterval(() => {\r\n            if (this.map.isLoaded && this.isSpritesLoaded()) {\r\n                clearInterval(wait);\r\n\r\n                // 리소스 로딩이 끝나면 서버에 접속한다\r\n                // 접속이 완료되면 핸들러들을 연결하고 게임을 시작한다\r\n                // TODO : 서버 접속을 만들어야 한다\r\n\r\n                // 월드를 생성한다\r\n                // TODO : terrain 생성코드를 나중에 여기로 옮겨와야 한다\r\n                while (this.scene.children.length > 0) {\r\n                    this.scene.remove(this.scene.children[0]);\r\n                }\r\n                // 맵을 초기화한다\r\n                // TODO: 맵을 여기서 초기화하도록 코드를 옮겨야 한다\r\n                this.scene.add(this._terrain);\r\n                this.initEntityGrid();\r\n\r\n                // 월드 라이트를 추가\r\n                // TODO : map에 따라서 라이트를 바꾸어야 한다\r\n                // 헤미스피어를 붙인다\r\n                const hemiLight = new THREE.HemisphereLight( 0xffffff, 0xffffff, 1 );\r\n                hemiLight.color.setHSL( 0.6, 1, 0.6 );\r\n                hemiLight.groundColor.setHSL( 0.095, 1, 0.75 );\r\n                hemiLight.position.set( 0, 50, 0 );\r\n                this.scene.add( hemiLight );\r\n\r\n                \r\n                // 프랍을 배치한다\r\n                let id = 2;\r\n                for(const propData of this.map.props) {\r\n                    const propEntity = EntityFactory.createEntity(propData.kind, id++, \"\");\r\n                    // 배치할 좌표를 계산한다\r\n                    propEntity.setGridSize(this.map.tilesize);\r\n                    propEntity.setGridPosition(propData.x, propData.y);\r\n                    \r\n                    \r\n                    this.addEntity(propEntity);\r\n                    this.scene.add(propEntity.mesh);\r\n                }\r\n\r\n\r\n                this.pathfinder = new Pathfinder(this.map.width, this.map.height)\r\n\r\n\r\n                // 플레이어를 선언한다\r\n                const player = new Player(1, username, \"\");\r\n                player.setSprite(this.sprites[\"clotharmor\"]);\r\n                player.onRequestPath((x, y) => {\r\n                    const path = this.findPath(player, x, y);\r\n                    return path;\r\n                });\r\n\r\n                player.onStopPathing((x, y) => {\r\n                    if(player.target instanceof Chest) {\r\n                        // 다음 프레임에 상자를 제거해버린다. \r\n                        // TODO : 이것도 좀 영리하게 만들수 없을까?\r\n                        requestAnimationFrame(() => {\r\n                            this.removeEntity(player.target);\r\n                            this.scene.remove(player.target.mesh);\r\n                            player.target = null;\r\n                        });\r\n                    }\r\n                });\r\n\r\n\r\n                // TODO : 스타팅포인트를 정해야한다\r\n                player.setGridSize(this.map.tilesize);\r\n                player.setGridPosition(5, 3);\r\n\r\n                this.addEntity(player);\r\n                this.player = player;\r\n\r\n\r\n                // 월드에 추가를 한다\r\n                // TODO : entity 를 일괄로 처리할 수 있는 장치가 필요하다?>\r\n                this.scene.add(this.player.mesh);\r\n\r\n                this.start();\r\n            }\r\n        }, 100);\r\n\r\n    }\r\n\r\n    loadSprites() {\r\n        const spriteNames = [\"clotharmor\", \"sword1\"];\r\n        const sprites = {};\r\n        for (const spName of spriteNames) {\r\n            const img = new Image();\r\n            img.src = `static/${spName}.png`;\r\n            img.onload = function() {\r\n                img.isLoaded = true;\r\n            }\r\n\r\n            sprites[spName] = img;\r\n        }\r\n\r\n        this.sprites = sprites;\r\n\r\n    }\r\n\r\n    loadMap() {\r\n        this.map = new Map();\r\n        this.map.offset = {\r\n            x: this._terrain.geometry.boundingBox.min.x,\r\n            y: this._terrain.geometry.boundingBox.min.y\r\n        };\r\n    }\r\n\r\n    isSpritesLoaded() {\r\n        if (_.any(this.sprites, function(sprite) { return !sprite.isLoaded; } )) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    initEntityGrid() {\r\n        this.entityGrid = [];\r\n        for(let i=0; i < this.map.height; i += 1) {\r\n            this.entityGrid[i] = [];\r\n            for(let j=0; j < this.map.width; j += 1) {\r\n                this.entityGrid[i][j] = {};\r\n            }\r\n        }\r\n    }\r\n\r\n    addEntity(entity) {\r\n        if(this.entities[entity.id] === undefined) {\r\n            this.entities[entity.id] = entity;\r\n            this.registerEntityPosition(entity);\r\n        }\r\n    }\r\n\r\n    removeEntity(entity) {\r\n        if(entity.id in this.entities) {\r\n            this.unregisterEntityPosition(entity);\r\n            delete this.entities[entity.id];\r\n        }\r\n    }\r\n  \r\n    registerEntityPosition(entity) {\r\n        const x = entity.gridX;\r\n        const y = entity.gridY;\r\n    \r\n        this.entityGrid[y][x][entity.id] = entity;\r\n    }\r\n\r\n    unregisterEntityPosition(entity) {\r\n        const x = entity.gridX;\r\n        const y = entity.gridY;\r\n\r\n        if(this.entityGrid[y][x][entity.id]) {\r\n            delete this.entityGrid[y][x][entity.id];\r\n        }\r\n    }\r\n\r\n    getEntityAt(x, y) {\r\n        if(this.map.isOutOfBounds(x, y) || !this.entityGrid) {\r\n            return null;\r\n        }\r\n        \r\n        const entities = this.entityGrid[y][x];\r\n        let entity = null;\r\n        if(_.size(entities) > 0) {\r\n            entity = entities[_.keys(entities)[0]];\r\n        } else {\r\n            // entity = this.getItemAt(x, y);\r\n        }\r\n        return entity;\r\n    }\r\n\r\n    getItemAt(x, y) {\r\n        return null;\r\n    }\r\n\r\n    getGridPosition(intersect, boundingbox) {\r\n        const ts = this.map.tilesize;\r\n        const xIndex = Math.floor((intersect.x - boundingbox.min.x) / ts );\r\n        const yIndex = Math.floor((intersect.z - boundingbox.min.y) / ts );\r\n        \r\n        return { x: xIndex, y: yIndex };\r\n    }\r\n\r\n    click(x, y) {\r\n        const size = new THREE.Vector2();\r\n        this.renderer.getSize(size);\r\n\r\n        const mouse = new THREE.Vector2();\r\n        mouse.x = (x / size.x) * 2 - 1;\r\n        mouse.y = -(y / size.y) * 2 + 1;\r\n\r\n        const raycaster = new THREE.Raycaster();\r\n        raycaster.setFromCamera( mouse, this.camera );\r\n        // 지형터치를 어떻게 만들지?\r\n        const intersects = raycaster.intersectObjects(this.scene.children);\r\n        for ( const inter of intersects) {\r\n            const pos = this.getGridPosition(inter.point, this._terrain.geometry.boundingBox);\r\n\r\n            // 이제 여기서 무엇을 클릭했는지 조사한다\r\n            const entity = this.getEntityAt(pos.x, pos.y);\r\n            if (entity instanceof Chest) {\r\n                // 상자를 향해  이동한다\r\n                this.player.setTarget(entity);\r\n                this.player.follow(entity);\r\n            } else {\r\n                // 해당 위치로 플레이어를 이동시킨다\r\n                this.player.go(pos.x, pos.y);\r\n            }\r\n        }\r\n    }\r\n\r\n    forEachEntity(callback) {\r\n        _.each(this.entities, function(entity) {\r\n            callback(entity);\r\n        });\r\n    }\r\n\r\n   \r\n    findPath(character, x, y) {\r\n        const path = [];\r\n        if(this.map.isColliding(x, y)) {\r\n            // 해당 위치가 갈수 없는 곳이다\r\n            return path;\r\n        }\r\n    \r\n        if(this.pathfinder && character) {\r\n            const path = this.pathfinder.findPath(this.map.grid, character, x, y, false);\r\n            return path;\r\n        } \r\n        return [];\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/game.js","// ux 와 게임 화면 구성을 여기서 연결한다\r\nexport default class App {\r\n    setGame(game) {\r\n        this.game = game;\r\n    }\r\n\r\n    center() {\r\n        window.scrollTo(0, 1);\r\n    }\r\n\r\n    start(username) {\r\n        // set option \r\n        this.center();\r\n        this.game.run();\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/js/app.js","import Character from \"./character\";\r\nimport Types from '../share/gametypes';\r\n\r\nexport default class Updater {\r\n    constructor(game) {\r\n        this.game = game;\r\n    }\r\n\r\n    update() {\r\n        this.updateCharacters();\r\n        this.updateTransitions();\r\n    }\r\n\r\n    updateCharacters() {\r\n        this.game.forEachEntity((entity) => {\r\n            const isCharacter = entity instanceof Character;\r\n            if (isCharacter && entity.isLoaded) {\r\n                this.updateCharacter(entity);\r\n            }\r\n        });\r\n    }\r\n\r\n    updateCharacter(c) {\r\n        // 캐릭터의 이동 위치를 업데이트한다\r\n        const fps = 60;\r\n        const tick = Math.round(16 / Math.round((c.moveSpeed / (1000 / fps))));\r\n    \r\n        if(c.isMoving() && c.movement.inProgress === false) {\r\n            if(c.orientation === Types.Orientations.LEFT) {\r\n                c.movement.start(this.game.currentTime,\r\n                                function(x) {\r\n                                    c.x = x;\r\n                                    c.hasMoved();\r\n                                },\r\n                                function() {\r\n                                    c.x = c.movement.endValue;\r\n                                    c.hasMoved();\r\n                                    c.nextStep();\r\n                                },\r\n                                c.x - tick,\r\n                                c.x - 16,\r\n                                c.moveSpeed);\r\n            }\r\n            else if(c.orientation === Types.Orientations.RIGHT) {\r\n                c.movement.start(this.game.currentTime,\r\n                                function(x) {\r\n                                    c.x = x;\r\n                                    c.hasMoved();\r\n                                },\r\n                                function() {\r\n                                    c.x = c.movement.endValue;\r\n                                    c.hasMoved();\r\n                                    c.nextStep();\r\n                                },\r\n                                c.x + tick,\r\n                                c.x + 16,\r\n                                c.moveSpeed);\r\n            }\r\n            else if(c.orientation === Types.Orientations.UP) {\r\n                c.movement.start(this.game.currentTime,\r\n                                function(y) {\r\n                                    c.y = y;\r\n                                    c.hasMoved();\r\n                                },\r\n                                function() {\r\n                                    c.y = c.movement.endValue;\r\n                                    c.hasMoved();\r\n                                    c.nextStep();\r\n                                },\r\n                                c.y - tick,\r\n                                c.y - 16,\r\n                                c.moveSpeed);\r\n            }\r\n            else if(c.orientation === Types.Orientations.DOWN) {\r\n                c.movement.start(this.game.currentTime,\r\n                                function(y) {\r\n                                    c.y = y;\r\n                                    c.hasMoved();\r\n                                },\r\n                                function() {\r\n                                    c.y = c.movement.endValue;\r\n                                    c.hasMoved();\r\n                                    c.nextStep();\r\n                                },\r\n                                c.y + tick,\r\n                                c.y + 16,\r\n                                c.moveSpeed);\r\n            }\r\n        }\r\n    }\r\n\r\n    updateTransitions() {\r\n        // 타일의 중앙으로 옮겨놓는다\r\n        const offsetX = this.game.map.offset.x + this.game.map.tilesize / 2;\r\n        const offsetY = 0;\r\n        const offsetZ = this.game.map.offset.y + this.game.map.tilesize / 2;\r\n\r\n        this.game.forEachEntity((entity) => {\r\n            const m = entity.movement;\r\n            if (m) {\r\n                if (m.inProgress) {\r\n                    m.step(this.game.currentTime)\r\n                }\r\n            }\r\n\r\n            // 엔티티의 실제 위치를 2d (x, y) 에서 3d(x,y,z) 으로 변경한다\r\n            if (entity.mesh) {\r\n                entity.mesh.position.set(\r\n                    offsetX + entity.x + entity.offset.x , \r\n                    offsetY + entity.offset.y, \r\n                    offsetZ + entity.y + entity.offset.z);\r\n\r\n                //console.log(entity.mesh.position, offsetY, entity.y, entity.offset.y, entity.gridX, entity.gridY );\r\n            }\r\n        })\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/js/updater.js","export default class Entity {\r\n    constructor(id, kind) {\r\n        this.id = id;\r\n        this.kind = kind;\r\n        this.isLoaded = false;\r\n    }\r\n\r\n    setGridSize(size) {\r\n        this.gridSize = size;\r\n    }\r\n\r\n    setPosition(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    setGridPosition(x, y) {\r\n        this.gridX = x;\r\n        this.gridY = y;\r\n    \r\n        this.setPosition(x * this.gridSize, y * this.gridSize);\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/js/entity.js","\r\nvar mask = new Int32Array(4096);\r\n\r\nfunction mesher(volume, dims) {\r\n    var vertices = [], faces = []\r\n      , dimsX = dims[0]\r\n      , dimsY = dims[1]\r\n      , dimsXY = dimsX * dimsY;\r\n  \r\n    //Sweep over 3-axes\r\n    for(var d=0; d<3; ++d) {\r\n      var i, j, k, l, w, W, h, n, c\r\n        , u = (d+1)%3\r\n        , v = (d+2)%3\r\n        , x = [0,0,0]\r\n        , q = [0,0,0]\r\n        , du = [0,0,0]\r\n        , dv = [0,0,0]\r\n        , dimsD = dims[d]\r\n        , dimsU = dims[u]\r\n        , dimsV = dims[v]\r\n        , qdimsX, qdimsXY\r\n        , xd\r\n  \r\n      if (mask.length < dimsU * dimsV) {\r\n        mask = new Int32Array(dimsU * dimsV);\r\n      }\r\n  \r\n      q[d] =  1;\r\n      x[d] = -1;\r\n  \r\n      qdimsX  = dimsX  * q[1]\r\n      qdimsXY = dimsXY * q[2]\r\n  \r\n      // Compute mask\r\n      while (x[d] < dimsD) {\r\n        xd = x[d]\r\n        n = 0;\r\n  \r\n        for(x[v] = 0; x[v] < dimsV; ++x[v]) {\r\n          for(x[u] = 0; x[u] < dimsU; ++x[u], ++n) {\r\n            var a = xd >= 0      && volume[x[0]      + dimsX * x[1]          + dimsXY * x[2]          ]\r\n              , b = xd < dimsD-1 && volume[x[0]+q[0] + dimsX * x[1] + qdimsX + dimsXY * x[2] + qdimsXY]\r\n            if (a ? b : !b) {\r\n              mask[n] = 0; continue;\r\n            }\r\n            mask[n] = a ? a : -b;\r\n          }\r\n        }\r\n  \r\n        ++x[d];\r\n  \r\n        // Generate mesh for mask using lexicographic ordering\r\n        n = 0;\r\n        for (j=0; j < dimsV; ++j) {\r\n          for (i=0; i < dimsU; ) {\r\n            c = mask[n];\r\n            if (!c) {\r\n              i++;  n++; continue;\r\n            }\r\n  \r\n            //Compute width\r\n            w = 1;\r\n            while (c === mask[n+w] && i+w < dimsU) w++;\r\n  \r\n            //Compute height (this is slightly awkward)\r\n            for (h=1; j+h < dimsV; ++h) {\r\n              k = 0;\r\n              while (k < w && c === mask[n+k+h*dimsU]) k++\r\n              if (k < w) break;\r\n            }\r\n  \r\n            // Add quad\r\n            // The du/dv arrays are reused/reset\r\n            // for each iteration.\r\n            du[d] = 0; dv[d] = 0;\r\n            x[u]  = i;  x[v] = j;\r\n  \r\n            if (c > 0) {\r\n              dv[v] = h; dv[u] = 0;\r\n              du[u] = w; du[v] = 0;\r\n            } else {\r\n              c = -c;\r\n              du[v] = h; du[u] = 0;\r\n              dv[u] = w; dv[v] = 0;\r\n            }\r\n            var vertex_count = vertices.length;\r\n            vertices.push([x[0],             x[1],             x[2]            ]);\r\n            vertices.push([x[0]+du[0],       x[1]+du[1],       x[2]+du[2]      ]);\r\n            vertices.push([x[0]+du[0]+dv[0], x[1]+du[1]+dv[1], x[2]+du[2]+dv[2]]);\r\n            vertices.push([x[0]      +dv[0], x[1]      +dv[1], x[2]      +dv[2]]);\r\n            faces.push([vertex_count, vertex_count+1, vertex_count+2, vertex_count+3, c]);\r\n  \r\n            //Zero-out mask\r\n            W = n + w;\r\n            for(l=0; l<h; ++l) {\r\n              for(k=n; k<W; ++k) {\r\n                mask[k+l*dimsU] = 0;\r\n              }\r\n            }\r\n  \r\n            //Increment counters and continue\r\n            i += w; n += w;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return { vertices:vertices, faces:faces };\r\n\r\n}\r\n\r\nfunction mesher2(volume, dims) {\r\n \r\n    var vertices = [], faces = [], x = [0,0,0], n = 0;\r\n  for(x[2]=0; x[2]<dims[2]; ++x[2])\r\n  for(x[1]=0; x[1]<dims[1]; ++x[1])\r\n  for(x[0]=0; x[0]<dims[0]; ++x[0], ++n)\r\n  if(!!volume[n]) {\r\n   \r\n\r\n    for(var d=0; d<3; ++d) {\r\n      var t = [x[0], x[1], x[2]]\r\n        , u = [0,0,0]\r\n        , v = [0,0,0];\r\n      u[(d+1)%3] = 1;\r\n      v[(d+2)%3] = 1;\r\n      for(var s=0; s<2; ++s) {\r\n        t[d] = x[d] + s;\r\n       \r\n        var tmp = u;\r\n        u = v;\r\n        v = tmp;\r\n        var vertex_count = vertices.length;\r\n        vertices.push([t[0],           t[1],           t[2]          ]);\r\n        vertices.push([t[0]+u[0],      t[1]+u[1],      t[2]+u[2]     ]);\r\n        vertices.push([t[0]+u[0]+v[0], t[1]+u[1]+v[1], t[2]+u[2]+v[2]]);\r\n        vertices.push([t[0]     +v[0], t[1]     +v[1], t[2]     +v[2]]);\r\n        faces.push([vertex_count, vertex_count+1, vertex_count+2, vertex_count+3, volume[n]]);\r\n      }\r\n \r\n    }\r\n  }\r\n  return { vertices:vertices, faces:faces };\r\n}\r\n\r\nvar Voxel = function (lo, hi, fn) {\r\n    var dims = [hi[0]-lo[0], hi[1]-lo[1], hi[2]-lo[2]];\r\n    var data = new Array(dims[2] * dims[1] * dims[0]);\r\n\r\n    let n = 0;\r\n\r\n    for (var k = lo[2]; k < hi[2]; k++)\r\n      for (var j = lo[1]; j < hi[1]; j++)\r\n        for(var i = lo[0]; i < hi[0]; i++) {\r\n          data[n] =fn(i, j, k);\r\n         \r\n          n++;\r\n        }\r\n\r\n    return mesher(data, dims);\r\n}\r\n\r\nexport default {\r\n  build : Voxel,\r\n} \n\n\n// WEBPACK FOOTER //\n// ./src/lib/voxel.js","export default {\r\n    Orientations: {\r\n        UP: 1,\r\n        DOWN: 2,\r\n        LEFT: 3,\r\n        RIGHT: 4\r\n    },\r\n\r\n    Entities: {\r\n        PLAYER: 1,\r\n        FIRE: 2,\r\n        CHEST: 3\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/share/gametypes.js","import voxel from '../lib/voxel';\r\nimport Entity from './entity';\r\nimport Transition from './transition';\r\nimport Types from '../share/gametypes';\r\n\r\nexport default class Character extends Entity{\r\n    constructor(id, kind) {\r\n        super(id, kind);\r\n        // position \r\n\r\n        // stat\r\n        \r\n        // position moving\r\n        this.nextGridX = -1;\r\n    \tthis.nextGridY = -1;\r\n        this.orientation = Types.Orientations.DOWN;\r\n\r\n        this.movement = new Transition();\r\n        this.path = null;\r\n        this.newDestination = null;\r\n    \tthis.adjacentTiles = {};\r\n\r\n        // animation speed\r\n        this.moveSpeed = 120;\r\n        this.walkSpeed = 100;\r\n        this.idleSpeed = 450;\r\n\r\n      \r\n        // combat \r\n\r\n        // build mesh\r\n        // 캐릭터는 이미지로부터 복셀을 빌드해서 가지고 있게 된다\r\n        \r\n\r\n    }\r\n\r\n    setSprite(sprite) {\r\n        this.sprite = sprite;\r\n        this.buildMesh();\r\n        this.isLoaded = true;\r\n    }\r\n\r\n    getFramePixelData() {\r\n        // 주어진 위치의 데이터를 복사해온다\r\n        const canvas = document.createElement('canvas');\r\n        canvas.width = this.sprite.width;\r\n        canvas.height = this.sprite.height;\r\n        \r\n        const context = canvas.getContext('2d');\r\n        context.translate(0, this.sprite.height);\r\n        context.scale(1, -1);\r\n\r\n        context.drawImage(this.sprite, 0, 0);\r\n        // 프레임 데이터를 가져온다\r\n        // 원래는 json 으로 가져와야 하는데.. 일단 이부분은 하드코딩해서 진행\r\n        const frameWidth = 32;\r\n        const frameheight = 32;\r\n        const data = context.getImageData(0, 0, frameWidth, frameheight);\r\n\r\n        return data;\r\n    }\r\n\r\n    buildMesh() {\r\n        if (this.sprite) {\r\n            const data = this.getFramePixelData();\r\n            const result = voxel.build([0,0,0], [data.width,data.height,1], function(x, y, z) {\r\n                const p = (x + y*data.width)*4;\r\n                const r = data.data[p + 0];\r\n                const g = data.data[p + 1];\r\n                const b = data.data[p + 2];\r\n                const a = data.data[p + 3];\r\n                \r\n                return a === 255 ? (r << 16) + (g << 8) + b : 0;\r\n            });\r\n\r\n            const geometry = new THREE.Geometry();\r\n            for(let i=0; i<result.vertices.length; ++i) {\r\n                const q = result.vertices[i];\r\n                geometry.vertices.push(new THREE.Vector3(q[0], q[1], q[2]));\r\n            }\r\n            for(let i=0; i<result.faces.length; ++i) {\r\n                const q = result.faces[i];\r\n                const color = new THREE.Color(q[4]);\r\n\r\n                const f1 = new THREE.Face3(q[0], q[1], q[2]);\r\n                f1.color = color;\r\n                f1.vertexColors = [color, color,color];\r\n                geometry.faces.push(f1);\r\n\r\n                const f2 = new THREE.Face3(q[2], q[3], q[0]);\r\n                f2.color = color;\r\n                f2.vertexColors = [color, color,color];\r\n                geometry.faces.push(f2);\r\n            }\r\n\r\n            geometry.computeFaceNormals();\r\n\r\n            geometry.verticesNeedUpdate = true;\r\n            geometry.elementsNeedUpdate = true;\r\n            geometry.normalsNeedUpdate = true;\r\n            \r\n            geometry.computeBoundingBox();\r\n\r\n            const material\t= new THREE.MeshLambertMaterial({\r\n                vertexColors: true\r\n            });\r\n\r\n            const mesh\t= new THREE.Mesh( geometry, material );\r\n            mesh.doubleSided = false;\r\n            mesh.castShadow = true;\r\n\r\n            // 바운딩 박스의 중앙으로 좌표를 옮긴다\r\n            const min = geometry.boundingBox.min;\r\n            const max = geometry.boundingBox.max;\r\n\r\n            // TODO : 오프셋도 나중에 데이터와 시켜야 한다\r\n            this.offset = {\r\n                x: -16,\r\n                y: -min.y,\r\n                z: 0,\r\n            }\r\n            \r\n            this.mesh = mesh;\r\n        }\r\n    }\r\n\r\n    requestPathfindingTo(x, y) {\r\n        if(this.request_path_callback) {\r\n            return this.request_path_callback(x, y);\r\n        } else {\r\n            return [];  \r\n        }\r\n    }\r\n\r\n    onRequestPath(callback) {\r\n        this.request_path_callback = callback;\r\n    }\r\n\r\n    onStartPathing(callback) {\r\n        this.start_pathing_callback = callback;\r\n    }\r\n\r\n    onStopPathing(callback) {\r\n        this.stop_pathing_callback = callback;\r\n    }\r\n\r\n    onBeforeStep(callback) {\r\n        this.before_step_callback = callback;\r\n    }\r\n\r\n    onStep(callback) {\r\n        this.step_callback = callback;\r\n    }\r\n\r\n    isMoving() {\r\n        return !(this.path === null);\r\n    }\r\n\r\n    hasMoved() {\r\n        if(this.hasmoved_callback) {\r\n            this.hasmoved_callback(this);\r\n        }\r\n    }\r\n\r\n    hasNextStep() {\r\n        return (this.path.length - 1 > this.step);\r\n    }\r\n\r\n    hasChangedItsPath() {\r\n        return !(this.newDestination === null);\r\n    }\r\n\r\n    setOrientation(orientation) {\r\n        if(orientation) {\r\n            this.orientation = orientation;\r\n        }\r\n    }\r\n\r\n    idle(orientation) {\r\n        this.setOrientation(orientation);\r\n        //this.animate(\"idle\", this.idleSpeed);\r\n    }\r\n\r\n    walk(orientation) {\r\n        this.setOrientation(orientation);\r\n        //this.animate(\"walk\", this.walkSpeed);\r\n    }\r\n\r\n    go(x, y) {\r\n        if(this.followingMode) {\r\n            this.followingMode = false;\r\n            this.target = null;\r\n        }\r\n        this.moveTo(x, y);\r\n    }\r\n\r\n    follow(entity) {\r\n        if(entity) {\r\n            this.followingMode = true;\r\n            this.moveTo(entity.gridX, entity.gridY);\r\n        }\r\n    }\r\n\r\n    moveTo(x, y) {\r\n        this.destination = { gridX: x, gridY: y };\r\n\r\n        if(this.isMoving()) {\r\n            this.continueTo(x, y);\r\n        } else {\r\n            \r\n            const path = this.requestPathfindingTo(x, y);\r\n            this.followPath(path);\r\n        }\r\n    }\r\n\r\n    stop() {\r\n        if(this.isMoving()) {\r\n            this.interrupted = true;\r\n        }\r\n    }\r\n\r\n    continueTo(x, y) {\r\n        this.newDestination = { x: x, y: y };\r\n    }\r\n\r\n    updateMovement() {\r\n        const p = this.path;\r\n        const i = this.step;\r\n    \r\n        if(p[i][0] < p[i-1][0]) {\r\n            this.walk(Types.Orientations.LEFT);\r\n        }\r\n        if(p[i][0] > p[i-1][0]) {\r\n            this.walk(Types.Orientations.RIGHT);\r\n        }\r\n        if(p[i][1] < p[i-1][1]) {\r\n            this.walk(Types.Orientations.UP);\r\n        }\r\n        if(p[i][1] > p[i-1][1]) {\r\n            this.walk(Types.Orientations.DOWN);\r\n        }\r\n    }\r\n\r\n    followPath(path) {\r\n        if(path.length > 1) { // Length of 1 means the player has clicked on himself\r\n            this.path = path;\r\n            this.step = 0;\r\n\r\n            if(this.followingMode) {\r\n                // 오브젝트를 향해 갈때는 제일 마지막 위치가 해당 오브젝트가 있는 위치이기 직전에서 멈추도록 한다\r\n                path.pop();\r\n            }\r\n        \r\n            if(this.start_pathing_callback) {\r\n                this.start_pathing_callback(path);\r\n            }\r\n            this.nextStep();\r\n        }\r\n    }\r\n\r\n    nextStep() {\r\n        let stop = false;\r\n        \r\n        if(this.isMoving()) {\r\n            if(this.before_step_callback) {\r\n                this.before_step_callback();\r\n            }\r\n        \r\n            this.updatePositionOnGrid();\r\n           \r\n            if(this.interrupted) { // if Character.stop() has been called\r\n                stop = true;\r\n                this.interrupted = false;\r\n            } \r\n            else {\r\n                if(this.hasNextStep()) {\r\n                    this.nextGridX = this.path[this.step+1][0];\r\n                    this.nextGridY = this.path[this.step+1][1];\r\n                }\r\n        \r\n                if(this.step_callback) {\r\n                    this.step_callback();\r\n                }\r\n            \r\n                if(this.hasChangedItsPath()) {\r\n                    const x = this.newDestination.x;\r\n                    const y = this.newDestination.y;\r\n                    const path = this.requestPathfindingTo(x, y);\r\n            \r\n                    this.newDestination = null;\r\n                    if(path.length < 2) {\r\n                        stop = true;\r\n                    }\r\n                    else {\r\n                        this.followPath(path);\r\n                    }\r\n                }\r\n                else if(this.hasNextStep()) {\r\n                    this.step += 1;\r\n                    this.updateMovement();\r\n                }\r\n                else {\r\n                    stop = true;\r\n                }\r\n            }\r\n        \r\n            if(stop) { // Path is complete or has been interrupted\r\n                this.path = null;\r\n                this.idle();\r\n            \r\n                if(this.stop_pathing_callback) {\r\n                    this.stop_pathing_callback(this.gridX, this.gridY);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    updatePositionOnGrid() {\r\n        this.setGridPosition(this.path[this.step][0], this.path[this.step][1]);\r\n    }\r\n\r\n    setTarget(target) {\r\n        if(this.target !== target) { // If it's not already set as the target\r\n            this.target = target;\r\n        }\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/js/character.js"],"sourceRoot":""}